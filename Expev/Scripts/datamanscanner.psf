;*******************************************
;** generic datamanscanner script - 0.1  ***
;** Jan. 11 2020                         ***
;** David Roehl                          ***
;*******************************************


;**********************************************
;Signals

INPUTOPEN sdatamanScan,SIGNAL;			-->sets the string used to signal the scan user
VAR sdatamanScan="";


;**********************************************
;PARAMETER
VAR sScannerFileName="";
VAR sMode="";
VAR sDiagDispType="";
VAR sAuxValue="";
VAR sSim="";
VAR sPicaData1="";
VAR sPicaData2="";
VAR sIPAddress="";

;****************************************************************************************
;-->TEST: Pama 3.00
PARAMETER sIPAddress,"ip address","","Enter the IP address of the congex dataman scanner";


;PARAMETER sScannerFileName,"FileName","","File Name for File Config Mode";
;PARAMETER sMode,"mode","DEFAULT,LOT,LOG","This setting controls what type of logging is performed by this channel.";
;PARAMETER sDiagDispType,"percent","OFF,ON","This setting controls this channels display method in the diagnose screen.";
;PARAMETER sAuxValue,"eeprom","","This setting allows the entery of the scanners EEPROM Checksum, which will always be checked at Start-up."
;PARAMETER sSim,"SimStatus","DEBUG,RUN","This setting allows testing with parameter sPEN data";
;PARAMETER sPicaData1,"PenData1","","This is the inupt data to simulate a scan";
;PARAMETER sPicaData2,"PenData2","","This is the inupt data to simulate a scan";
;****************************************************************************************

VAR mismatchmsg="\n*** MISMATCH! *** \nScanned value = ";
VAR TIMEOUTMSG="TIMEOUT";
VAR nNoreads=0;							-->Used to store Diagnose screen counts
VAR nGoodreadseads=0;						-->Used to store Diagnose screen counts
VAR nTReads=0;							-->Used to store Diagnose screen counts
VAR nCurNoreads=0;  holds the number of NR in a row
VAR vReturnValue="";						-->Standard Subroutine Return variable
VAR sScanValue;
VAR readvalue=NULL;
VAR whichevent=0;
VAR waittimeout=30;

VAR sFirstValue="";
VAR nLoopCount=0;

;Eof variable declarations

IF (sSim="DEBUG")(VAR waittimeout=30);"RUN"
IF (sSim!"DEBUG")(VAR waittimeout=-1);VAR waittimeout=-1;[~] <-- Change this to -1 so it won't time out



TM 1,"DISCONNECT";
WAIT 20;
TM 3,"CONNECT",sIPAddress,23;				--> Initialize Communication with Dataman scanner
 ;IF (sSim="DEBUG")(VAR STATUS=PORT);
 ;IF (sSim="DEBUG")(VAR STATUS=ADDRESS);

WAIT 10;
IF (CONNECTION = "CONNECTED")(VAR STATUS = "Cognex connected succesfully");
IF (CONNECTION = "CONNECTED")(GOTO pconnectedSuccesfully);
MSG_ACK "FAILED TO CONNECT WITH Cognex INTERFACE - \n    CANNOT CONTINUE";
GOTO pFailtoconnect;

LBL pFailtoconnect;
MSG_ACK "FAILED TO CONNECT WITH COGNEX INTERFACE - \n    CANNOT CONTINUE";
GOTO pFailtoconnect;

LBL pconnectedSuccesfully;


T "+\n";

WAIT 10;

T "+\n";

WAIT 10;

T "+\n";

WAIT 10;

T "+\n";
WAIT 10;

T "+\n";
WAIT 10;

T "+\n";




;New stuff<
VAR TIMEOUT = 6000;

VAR ncounter=0;
VAR nreadCounter=0;
LBL readLoop;************************************

VAR readvalue="";
R readvalue;

IF (readvalue="")(IF (ncounter=10)(T "+\n"));
IF (readvalue="")(IF (ncounter=10)(WAIT 50));
IF (readvalue="")(IF (ncounter=10)(T "+\n"));
IF (readvalue="")(IF (ncounter=10)(WAIT 50));
IF (readvalue="")(IF (ncounter=10)(T "+\n"));
IF (readvalue="")(IF (ncounter=10)(WAIT 50));
IF (readvalue="")(IF (ncounter=10)(T "+\n"));
IF (readvalue="")(IF (ncounter=10)(WAIT 50));
IF (readvalue="")(IF (ncounter=10)(T "+\n"));
IF (readvalue="")(IF (ncounter=10)(WAIT 50));
IF (readvalue="")(IF (ncounter=10)(T "+\n"));
IF (readvalue="")(IF (ncounter=10)(WAIT 50));
IF (readvalue="")(IF (ncounter=10)(VAR nCounter=0));

IF (readvalue!"")(VAR sdatamanScan=readvalue);
IF (readvalue!"")(INC nreadCounter);

INC ncounter;

VAR STATUS ="++nCounter:("+numtostr(ncounter)+")   nreadCounter: "+numtostr(nreadCounter);


GOTO readLoop;
;>all below is not used currently*****************************************************************************************************************************








;Initial setup  loads the first scanned value to sFirstValue and sets that as the 'goodread' value

VAR whichevent=0;
WAITFORANY whichevent,waittimeout,READ;
;VAR STATUS ="---------------- whichevent --- = "+numtostr(whichevent);
IF (whichevent=0)(GOTO pconnectedSuccesfully);
IF (whichevent!1)(GOTO pconnectedSuccesfully);

R readvalue;
IF (readvalue="") (GOTO pconnectedSuccesfully);
IF (readvalue="NR") (GOTO pconnectedSuccesfully);
VAR sFirstValue=readvalue;
VAR STATUS="------------------------------ sFirstValue = "+sFirstValue;

INC TGOODREAD;

STARTHEART;



;------------------------------Trying to cause issues

T "+\n";

WAIT waittimeout;

T "+\n";

WAIT waittimeout;

T "+\n";

WAIT waittimeout;

T "+\n";
WAIT waittimeout;

T "+\n";
WAIT waittimeout;

T "+\n";

;------------------------------eof Trying to cause issues

LBL theLoop;

;IF (nLoopCount>5)(T "+\n");

VAR STATUS= "theLoop"+numtostr(nLoopCount);
VAR whichevent=0;
WAITFORANY whichevent,waittimeout,READ;
;VAR STATUS ="---------------- whichevent --- = "+numtostr(whichevent);
IF (whichevent=0)(INC nLoopCount);
IF (whichevent=0)(GOTO theLoop);
IF (whichevent=1)(VAR nLoopCount=0);
IF (whichevent=1)(GOTO pRead);

GOTO theLoop;


LBL pRead;

R readvalue;

IF (readvalue="")(GOTO theLoop);

LBL pDebugRoutine;
VAR STATUS = "- READ = "+readvalue;
VAR sScanValue=readvalue;
;VAR STATUS = "sScanValue = "+sScanValue;

LBL secondRead;

IF (sScanValue="NR") (GOTO noRead);

VAR nCurNoreads=0;  reset current noread counter

VAR STATUS ="sScanValue= "+sScanValue;

IF (sScanValue!sFirstValue) ( GOTO badValue);

LBL goodRead;*******************************************
INC TGOODREAD;
VAR RECEIVED=sScanValue;

GOTO eofpRead;

LBL noRead; ********************************************

INC TNOREAD;
INC nCurNoreads;
VAR STATUS ="Received a NR:"+numtostr(nCurNoreads);

IF (nCurNoreads>MAXNOREAD)(MSG_ACK "Excessive NR");
IF (nCurNoreads>MAXNOREAD)(VAR nCurNoreads=0);

GOTO eofpRead;



LBL badValue;   *****************when the current scan does not match the set scan value
VAR STATUS = "+++++++++++++++mismatch+++++++++++++++";

INC MISREADS;
VAR sMessage="mismatch\nReceived: "+sScanValue+"\nGoodvalue: "+sFirstValue;
MSG_ACK sMessage;

GOTO eofpRead;



LBL eofpRead;    The solution for the buffering issue.

VAR TIMEOUT = 50;
VAR readvalue2="";
R readvalue2;

IF (readvalue2="")(VAR STATUS="R returned ''");

IF (readvalue2=NULL)(VAR STATUS="R returned null");

IF (readvalue2!"")(VAR STATUS = "++++++readvalue2:"+readvalue2);

IF (readvalue2!"")(VAR sScanValue=readvalue2);
IF (readvalue2!"")(GOTO secondRead);

GOTO theLoop;


;CANCEL_MSG;
;MSG_ACK "This Channel has not been set-up.\nDEFAULT.PSF";

LBL theend;
VAR RECEIVED="Script Complete";
END;