;*******************************************
;** generic datamanscanner script - 0.1  ***
;** Jan. 11 2020                         ***
;** David Roehl                          ***
;*******************************************


;****************************************************************************************
;SIGNALs

INPUTOPEN sdatamanScan0,SIGNAL;			-->sets the string used to signal the scan user
VAR sdatamanScan0="";

INPUTOPEN swaitdatamanScan0,SIGNAL;			-->sets the string used to signal that the scan user is done processing it.
VAR swaitdatamanScan0="";					"READY" means send more scans, "HOLD"  means wait until ready

INPUTOPEN sdatamanScan1,SIGNAL;			-->sets the string used to signal the scan user
VAR sdatamanScan1="";

INPUTOPEN swaitdatamanScan1,SIGNAL;			-->sets the string used to signal that the scan user is done processing it.
VAR swaitdatamanScan1="";					"READY" means send more scans, "HOLD"  means wait until ready

INPUTOPEN sdatamanScan2,SIGNAL;			-->sets the string used to signal the scan user
VAR sdatamanScan2="";

INPUTOPEN swaitdatamanScan2,SIGNAL;			-->sets the string used to signal that the scan user is done processing it.
VAR swaitdatamanScan2="";					"READY" means send more scans, "HOLD"  means wait until ready

INPUTOPEN sdatamanScan3,SIGNAL;			-->sets the string used to signal the scan user
VAR sdatamanScan3="";

INPUTOPEN swaitdatamanScan3,SIGNAL;			-->sets the string used to signal that the scan user is done processing it.
VAR swaitdatamanScan3="";					"READY" means send more scans, "HOLD"  means wait until ready

INPUTOPEN sdatamanScan4,SIGNAL;			-->sets the string used to signal the scan user
VAR sdatamanScan4="";

INPUTOPEN swaitdatamanScan4,SIGNAL;			-->sets the string used to signal that the scan user is done processing it.
VAR swaitdatamanScan4="";					"READY" means send more scans, "HOLD"  means wait until ready

INPUTOPEN sdatamanScan5,SIGNAL;			-->sets the string used to signal the scan user
VAR sdatamanScan5="";

INPUTOPEN swaitdatamanScan5,SIGNAL;			-->sets the string used to signal that the scan user is done processing it.
VAR swaitdatamanScan5="";					"READY" means send more scans, "HOLD"  means wait until ready

INPUTOPEN sdatamanScan6,SIGNAL;			-->sets the string used to signal the scan user
VAR sdatamanScan6="";

INPUTOPEN swaitdatamanScan6,SIGNAL;			-->sets the string used to signal that the scan user is done processing it.
VAR swaitdatamanScan6="";					"READY" means send more scans, "HOLD"  means wait until ready

INPUTOPEN sdatamanScan7,SIGNAL;			-->sets the string used to signal the scan user
VAR sdatamanScan7="";

INPUTOPEN swaitdatamanScan7,SIGNAL;			-->sets the string used to signal that the scan user is done processing it.
VAR swaitdatamanScan7="";					"READY" means send more scans, "HOLD"  means wait until ready

INPUTOPEN sdatamanScan8,SIGNAL;			-->sets the string used to signal the scan user
VAR sdatamanScan8="";

INPUTOPEN swaitdatamanScan8,SIGNAL;			-->sets the string used to signal that the scan user is done processing it.
VAR swaitdatamanScan8="";					"READY" means send more scans, "HOLD"  means wait until ready


INPUTOPEN sdatamanScan9,SIGNAL;			-->sets the string used to signal the scan user
VAR sdatamanScan9="";

INPUTOPEN swaitdatamanScan9,SIGNAL;			-->sets the string used to signal that the scan user is done processing it.
VAR swaitdatamanScan9="";					"READY" means send more scans, "HOLD"  means wait until ready



INPUTOPEN sbreakit,SIGNAL;			-->sets the string used to try to break 
VAR sbreakit="FALSE";					"TRUE" will give the signal to try to break the script "FALSE" will allow it to act normally


;****************************************************************************************
;PARAMETER VARs


VAR sIPAddress="";
VAR sScannerPort="";

VAR sTimeout="";
VAR debug="";
VAR sID="";
VAR sCommunicationCheck="";


;****************************************************************************************
;PARAMETER Declarations
PARAMETER sIPAddress,"IP address","","Enter the IP address of the congex dataman scanner";
PARAMETER sScannerPort,"Scanner port","","Enter the Port of the congex dataman scanner (blank is 23 which is default for the scanners)";

PARAMETER sID,"What variable name to use to transfer data","sdatamanScan0,sdatamanScan1,sdatamanScan2,sdatamanScan3,sdatamanScan4,sdatamanScan5,sdatamanScan6,sdatamanScan7,sdatamanScan8,sdatamanScan9","Enter the signal variable name that will be used to transmit data to the other programs, there is a corresponding HOLD signal variable called swaitdatamanscan(x)."

PARAMETER sTimeout,"Read timeout(in ms)","","Enter the timeout for the read(in milliseconds). Blank for default (10s), -1 for infinite."
PARAMETER sCommunicationCheck,"Communication check frequency.","","How often to check that the scanner is still connected. Blank is default, -1 is disabled.(time between checks=read timeout * this value)"

PARAMETER debug,"Debug mode","debug,not debug","Debug displays more info.  It has no functional effect"




;****************************************************************************************
;VAR Declarations

VAR TIMEOUTMSG="TIMEOUT";

VAR sScanValue="";
VAR readvalue="";
VAR sMsg="";
VAR swaitID="";

VAR runMSG="";


VAR whichevent=0;
VAR waittimeout=30;
VAR nReadTimeoutCounter=0;
VAR nReconnectCounter=0;
VAR nCommunicationCheck="";  Will be converted to num before program starts
VAR nTimeout="";  Will be converted to num before program starts
VAR nScannerPort="";  Will be converted to num before program starts



;VARs for testing
VAR nLoopCount=0;



;****************************************************************************************
;Eof  declarations



;****************************************************************************************
;prestart setup
;Closes unnecessary inputs  and performs other declaration related functions




IF (sID="sdatamanScan0")(GOTO p1);

INPUTCLOSE sdatamanScan0,SIGNAL;		
INPUTCLOSE swaitdatamanScan0,SIGNAL;		

LBL p1;
IF (sID="sdatamanScan1")(GOTO p2);

INPUTCLOSE sdatamanScan1,SIGNAL;		
INPUTCLOSE swaitdatamanScan1,SIGNAL;	

LBL p2;
IF (sID="sdatamanScan2")(GOTO p3);

INPUTCLOSE sdatamanScan2,SIGNAL;		
INPUTCLOSE swaitdatamanScan2,SIGNAL;	

LBL p3;
IF (sID="sdatamanScan3")(GOTO p4);

INPUTCLOSE sdatamanScan3,SIGNAL;		
INPUTCLOSE swaitdatamanScan3,SIGNAL;	

LBL p4;
IF (sID="sdatamanScan4")(GOTO p5);

INPUTCLOSE sdatamanScan4,SIGNAL;		
INPUTCLOSE swaitdatamanScan4,SIGNAL;	

LBL p5;
IF (sID="sdatamanScan5")(GOTO p6);

INPUTCLOSE sdatamanScan5,SIGNAL;		
INPUTCLOSE swaitdatamanScan5,SIGNAL;	

LBL p6;
IF (sID="sdatamanScan6")(GOTO p7);

INPUTCLOSE sdatamanScan6,SIGNAL;		
INPUTCLOSE swaitdatamanScan6,SIGNAL;	

LBL p7;
IF (sID="sdatamanScan7")(GOTO p8);

INPUTCLOSE sdatamanScan7,SIGNAL;		
INPUTCLOSE swaitdatamanScan7,SIGNAL;	

LBL p8;
IF (sID="sdatamanScan8")(GOTO p9);

INPUTCLOSE sdatamanScan8,SIGNAL;		
INPUTCLOSE swaitdatamanScan8,SIGNAL;	

LBL p9;
IF (sID="sdatamanScan9")(GOTO p10);

INPUTCLOSE sdatamanScan9,SIGNAL;		
INPUTCLOSE swaitdatamanScan9,SIGNAL;	

LBL p10


;sets up swaitID to appropriate swaitdatamanScanx
IF (sID="sdatamanScan0")(VAR swaitID="swaitdatamanScan0");
IF (sID="sdatamanScan1")(VAR swaitID="swaitdatamanScan1");
IF (sID="sdatamanScan2")(VAR swaitID="swaitdatamanScan2");
IF (sID="sdatamanScan3")(VAR swaitID="swaitdatamanScan3");
IF (sID="sdatamanScan4")(VAR swaitID="swaitdatamanScan4");
IF (sID="sdatamanScan5")(VAR swaitID="swaitdatamanScan5");
IF (sID="sdatamanScan6")(VAR swaitID="swaitdatamanScan6");
IF (sID="sdatamanScan7")(VAR swaitID="swaitdatamanScan7");
IF (sID="sdatamanScan8")(VAR swaitID="swaitdatamanScan8");
IF (sID="sdatamanScan9")(VAR swaitID="swaitdatamanScan9");


IF (sScannerPort="")(VAR nScannerPort="23");
IF (sScannerPort!"")(VAR nScannerPort=sScannerPort);
STRTONUM nScannerPort;

IF (sTimeout="")(VAR nTimeout="10000");
IF (sTimeout!"")(VAR nTimeout=sTimeout);
STRTONUM nTimeout;

IF (sCommunicationCheck="")(VAR nCommunicationCheck="60");
IF (sCommunicationCheck!"")(VAR nCommunicationCheck=sCommunicationCheck);
STRTONUM nCommunicationCheck;




LBL preStart;

VAR sMsg="Debug mode is on\n-------->IPAdress:Port= "+sIPAddress+":"+sScannerPort+"\n-------->nTimeout= "+numtostr(nTimeout)+"";
IF (debug="debug")(VAR STATUS=sMsg);

TM 1,"DISCONNECT";
FLUSH;


GOTO pConnect; Skips the disconnected stuff


;****************************************************************************************
LBL pDisconnected;   If scanner and script become disconnected 

TM 1,"DISCONNECT"; does this need to be here?
WAIT 10;

INC nReconnectCounter;

LBL pToManyReconnects;
IF (nreadCounter>3)(MSG_ACK "Dataman Scanner at "+sIPAddress+" has had too many reconnects check scanner and restart PAMA.");  --------stops the script after 3 reconnect attempts
IF (nreadCounter>3)(GOTO pToManyReconnects);

VAR STATUS="Scanner disconnected attempting to reconnect.";

;eof pDisconnected


;****************************************************************************************
;connect to the camera
;

LBL pConnect;


;TM 1,"DISCONNECT";  moving this to before LBL pConnect 
WAIT 20;

VAR STATUS = "Connecting to "+sIPAddress;


IF (CONNECTION!"CONNECTED")(TM 3,"CONNECT",sIPAddress,nScannerPort);				--> Initialize Communication with Dataman scanner



WAIT 10;
IF (CONNECTION = "CONNECTED")(VAR STATUS = "Cognex connected succesfully");
IF (CONNECTION = "CONNECTED")(GOTO pconnectedSuccesfully);
MSG_ACK "FAILED TO CONNECT WITH Cognex INTERFACE With IP:"+sIPAddress+" - \n    Hit OK to try again";
GOTO pConnect;   Trys the connection again




LBL pconnectedSuccesfully;eof pConnect
;****************************************************************************************


VAR TIMEOUT = nTimeout;

VAR ncounter=0;
VAR nreadCounter=0;

;****************************************************************************************
;****************************************************************************************
;the main loop
LBL theLoop;

;****************************************************************************************
;pready
;this checks to see if the master script is ready to receive a value
LBL pready;

VAR runMSG="VAR STATUS="+swaitID+";";
IF (debug="debug")(RUN runMSG);

INC nLoopCount;


IF (debug="debug")(VAR STATUS="In waitforany loop:"+numtostr(nLoopCount));

VAR runMSG="WAITFORANY whichevent,nTimeout,"+swaitID+";";swaitdatamanScan0;   Waits for signal to send next scan
RUN runMSG;

VAR runMSG="VAR STATUS="+swaitID+";";
IF (debug="debug")(RUN runMSG);
IF (debug="debug")(VAR STATUS=whichevent);


VAR runMSG="IF ("+swaitID+"='HOLD')(GOTO pready);";
RUN runMSG;

;IF (whichevent=0)(GOTO pready);  should outdated

VAR runMSG="VAR STATUS="+swaitID+";";

IF (whichevent=1)(IF (debug="debug")(RUN runMSG));

;IF (whichevent=1)(IF (swaitdatamanScan0="READY")(GOTO preadLoop));
VAR runMSG="IF ("+swaitID+"='HOLD')(GOTO pready)";
IF (whichevent=1)(RUN runMSG);

IF (whichevent=1)(GOTO preadLoop);                                          +-+- if no valid entry in swaitdatamanScan try to read


;****************************************************************************************
;preadLoop
;the loop that attempts to read  from the scanner
LBL preadLoop;


IF (debug="debug")(IF (sbreakit="TRUE")(GOTO pbreakit));    --------------try to break stuff------------------------------------------------------------------

;IF (debug="debug")(IF (sbreakit!"FALSE")(GOTO ptestit));    --------------try to test stuff------------------------------------------------------------------


VAR runMSG="VAR STATUS="+swaitID+";";
IF (debug="debug")(RUN runMSG);

VAR TIMEOUT = nTimeout;
VAR readvalue="";
R readvalue;


INC nReadTimeoutCounter;
IF (readvalue="")(IF (nReadTimeoutCounter=nCommunicationCheck)(GOTO pVerifyConnection));


LBL pAfterRead;

INC ncounter;

VAR runMSG="IF ("+swaitID+"='HOLD')(GOTO pready)";
IF (readvalue!"")(RUN runMSG);             +-+-Makes this script wait until master script is ready for another scan

IF (readvalue!"")(INC nreadCounter);

VAR runMSG="VAR "+sID+"=readvalue";
IF (readvalue!"")(RUN runMSG);
IF (readvalue!"")(VAR nReadTimeoutCounter=0);  resets the communication check counter

IF (debug="debug")(IF (readvalue!"")(VAR STATUS = "RUN VAR "+sID+"="+readvalue));

IF (readvalue!"")(GOTO pready);



IF (debug="debug")(VAR STATUS ="++++++preadLoop++++++ncounter:("+numtostr(ncounter)+")   nreadCounter: "+numtostr(nreadCounter)+"   nReadTimeoutCounter:"+numtostr(nReadTimeoutCounter));


IF (CONNECTION="DISCONNECTED")(GOTO pDisconnected);

GOTO preadLoop;  eof preadLoop
;****************************************************************************************
;eof main loop
;****************************************************************************************


;****************************************************************************************
;functions
;****************************************************************************************
;pVerifyConnection
;This will check the connection to the Scanner by asking for its IP address

LBL pVerifyConnection;     

IF (debug="debug")(VAR STATUS="Checking communication with Scanner");

VAR nReadTimeoutCounter=0;  resets the counter

VAR TIMEOUT = 0;
VAR readvalue="";
R  readvalue;           verifies nothing has been sent

IF (readvalue!"")(GOTO pAfterRead);



T "||>GET NET-LOCAL.IP-ADDRESS\r\n";     Asks the scanner for its ip address
WAIT 10;

VAR TIMEOUT = 1000;
VAR readvalue="";
R  readvalue;

IF (debug="debug")(IF (readvalue!"")(VAR STATUS="Scanner response:"+readvalue));
IF (debug="debug")(IF (readvalue="")(VAR STATUS="Scanner did not respond"));


;IF (readvalue="")(VAR STATUS="Need to do something here?  It is probably disconnected."); replace something[fix]


IF (readvalue=sIPAddress)(VAR STATUS="Camera connection verified");
IF (readvalue=sIPAddress)(GOTO pVerifyConnectionEnd);                     Valid connection


IF (readvalue!sIPAddress)(MSG_ACK "Scanner disconnected press OK to attempt to reconnect.");
IF (readvalue!sIPAddress)(GOTO pDisconnected);


LBL pVerifyConnectionEnd;
VAR TIMEOUT = nTimeout;

GOTO pready;  eof pVerifyConnection
;****************************************************************************************



;---------------------------------All functions below are for testing

LBL pbreakit;  Trying to break stuff
VAR STATUS ="---------------------------------------------------------Trying to break things";

T "+\n";1

WAIT 10;

T "+\n";2

WAIT 10;
T "+\n";3

WAIT 10;
T "+\n";4
WAIT 10;
T "+\n";5
WAIT 10;
T "+\n";6
WAIT 10;
T "+\n";7

WAIT 10;

T "+\n";8

WAIT 10;
T "+\n";9

WAIT 10;
T "+\n";10

WAIT 10;

T "+\n";11

WAIT 10;

T "+\n";12

WAIT 10;
T "+\n";13

WAIT 10;
T "+\n";14
WAIT 10;
T "+\n";15
WAIT 10;
T "+\n";16

WAIT 10;

T "+\n";17

WAIT 10;

T "+\n";18

WAIT 10;
T "+\n";19

WAIT 10;
T "+\n";20

WAIT 10;
T "+\n";1

WAIT 10;

T "+\n";2

WAIT 10;
T "+\n";3

WAIT 10;
T "+\n";4
WAIT 10;
T "+\n";5
WAIT 10;
T "+\n";6
WAIT 10;
T "+\n";7

WAIT 10;

T "+\n";8

WAIT 10;
T "+\n";9

WAIT 10;
T "+\n";10

WAIT 10;

T "+\n";11

WAIT 10;

T "+\n";12

WAIT 10;
T "+\n";13

WAIT 10;
T "+\n";14
WAIT 10;
T "+\n";15
WAIT 10;
T "+\n";16

WAIT 10;

T "+\n";17

WAIT 10;

T "+\n";18

WAIT 10;
T "+\n";19

WAIT 10;
T "+\n";40

WAIT 10;

IF (nLoopCount=11)(VAR nLoopCount=0);

VAR sbreakit="FALSE";
VAR STATUS = "--------------------------------------------------------eof trying to break things.";

;VAR sdatamanScan="try 1/5";
;VAR sdatamanScan="try 2/5";
;VAR sdatamanScan="try 3/5";
;VAR sdatamanScan="try 4/5";
;VAR sdatamanScan="try 5/5";



GOTO preadLoop;


;****************************************************************************************
;eof functions
;****************************************************************************************





LBL theend;
VAR RECEIVED="Script Complete";
END;


;***********************************************************
;**** Error handler subroutine                           ***
;****    Will latch every time there is a runtime error  ***
;****    in the script preventing PAMA from continuing to***
;****    run while a script is dead.                     ***
;***********************************************************
LBL _ERRORHANDLER, sMessage, nNumber;
LBL latch;
VAR STATUS="Run Time Error: "+sMessage;
VAR sMessage="SYSTEM FAULT   "+sMessage;
MSG_ACK sMessage;
GOTO latch;